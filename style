对数据操作的几种类型：
1. 对具体的概念进行增删改，语句如下：           这里涉及到的函数有增加 删除 具体的 概念 实例 关系 属性 修改它们的术语名。
                                    概念+＝学生   增加概念的函数 参数为术语或术语的列表
                                    实例+＝张三   增加实例的函数 参数为术语或术语的列表
                                    关系+＝同学   增加关系的函数 参数为术语或术语的列表   func(term) func(term list) 返回 term 以及 id
                                    属性+＝学号   增加属性的函数 参数为术语或术语的列表
                                    概念+=[学生 教师 课程] 增加概念的函数 参数为术语或术语的列表
                                    实例+=&学生们  增加实例的函数 参数为术语或术语的列表
                                     
                                    概念-=学生  删除概念的函数，参数为术语或术语的列表
                                    实例-=张三
                                    关系-＝同学               func(id)或 func(id list) 返回 ok
                                    属性－＝学号

                                    概念.学生>>student
                                    概念.张三>>实例.张三               func(id,csyn,oldval,sel,newval) sel从 con ins rel att中选 如果id和sel一致，则只改术语名
                                    实例.张三>>张小明    如果前部有两项，则是修改术语

2. 对具体的概念的信息进行增删改 语句如下：  这里涉及到的函数是 具体的概念或实例的关系 属性的增加和删除 具体的概念和实例的关系和属性的值的增加和删

                                    学号.has_instance+＝[2001 2002 2003]  func(id,rel(att),vallist)
                                    学生.superclass_of+＝物理工程学院学生
                                     
                                    学生.性别+＝空  #表示只增加性别属性
                                    张三.同学+＝李四
                                    教师.同义+=教师
                                    张三.同学－＝李四
                                    张三.同学+=李四.朋友    右边函数求出值后，才可以调用左边函数，而右边的函数都是查询函数，所以可以设计一个总的查询函数，用于对a.b.c.d.e的查询。
                                    张三.同学+=[李四 王五].[朋友 同学]

3. 对具体的概念及其信息的查询和复杂查询，语句如下：
                                    张三
                                    张三.同学 #如果后面没有值，则默认是all 整个顺序应该是实例（概念）关系（属性）实例（概念）关系（属性）……
                                    张三.同学.all.朋友.所在班级
                                    张三.同学.李四 #返回是真假，如果是同学就是真，如果不是同学则为假。
                                    张三.&A.李四
                                    &A.同学.李四

                                    [张三 李四].同学.&A, &A.朋友.&B, &B.&D.李四,@大于（&A.年龄，30） 复杂查询专门编写一个函数。简单查询编写一个函数。
4. 对于规则，这里主要是对规则的存储，推理的关键点还是在于复杂查询。语句如下：
                                    &A.老乡.&B:-&A.籍贯&C,&B.籍贯.&C

5. 因为本知识图谱的一个亮点在于能够存储方法，所以也能对方法进行调用，其实也是查询的一种，语句如下：
                                    @密度_质量_体积（&A,物体.质量，物理.体积）
                                    @求最大值（通信一班.学生.all.数电成绩）

6. 还有一项就是对变量的处理，对中括号和小括号的处理。
                                    &学生们=[张三 李四 王五 小明]
                                    &朋友们=张三.朋友
                                    &变量名=张三.[朋友 同学]


                       返回到前台的数据格式为：[[左]，[右]],与语句的格式对应
                       左：[函数名，[概念，[id1][id2]]]
                       右：[value or query,[][][]]

                       举例：
                       张三.同学+=[李四 王五].[朋友 同学]
                       [增加关系值函数，[张三，[001 dict]，[003 dict]][同学，[101 dict]]]     [query,[[李四，[][]]，[王五，[][]]]，[[朋友，[][]][同学，[][]]]]
                       从前台返回来的数据为：
                       在听来的数据格式的基础上，去掉不需要的id
                      [增加关系值函数， [张三，001 ][同学，101]]     [query,[李四，345]，[王五，556]]，[[朋友，111][同学，122]]]